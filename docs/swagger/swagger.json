{
  "openapi": "3.0.0",
  "info": {
    "title": "GasFein API",
    "version": "1.0.0",
    "description": "This is the official API of GasFein",
    "license": {
      "name": "Apache-2.0 license",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "http://10.0.0.37:3005/api/v1",
      "description": "Development server (HTTP)"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/gas-prices/{province}/{city}": {
      "get": {
        "summary": "Get gas prices for a specific province and city",
        "tags": [
          "Gas Api"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "province",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The province to retrieve gas prices for"
          },
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The city to retrieve gas prices for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved gas prices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gasPrices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "station": {
                            "type": "string",
                            "description": "The name of the gas station"
                          },
                          "price": {
                            "type": "number",
                            "description": "The gas price at the station"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching gas prices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Une erreur est survenue lors de la récupération des prix de l'essence."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/directions/coordinates": {
      "post": {
        "summary": "Get directions with multiple points",
        "description": "Accepts an array of objects containing either coordinates (longitude and latitude) or an address.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "properties": {
                        "longitude": {
                          "type": "number",
                          "example": -73.586295
                        },
                        "latitude": {
                          "type": "number",
                          "example": 45.572744
                        }
                      },
                      "required": [
                        "longitude",
                        "latitude"
                      ]
                    },
                    {
                      "properties": {
                        "address": {
                          "type": "string",
                          "example": "8855 Ch de Chambly"
                        }
                      },
                      "required": [
                        "address"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully fetched directions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Directions retrieved successfully"
                    },
                    "route": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "longitude": {
                            "type": "number",
                            "example": -73.586295
                          },
                          "latitude": {
                            "type": "number",
                            "example": 45.572744
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid format. Please provide either coordinates or an address."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching directions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error while trying to fetch the directions"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user's details",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "profileImage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Authenticate user by email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users/login/jwt": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Authenticate user using JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jwt": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully"
          },
          "401": {
            "description": "Invalid JWT token"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "profileImage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/stations": {
      "post": {
        "tags": [
          "Stations"
        ],
        "summary": "Add a station to a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to add a station to",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stationName": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Station added successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "Stations"
        ],
        "summary": "Get all stations of a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to fetch stations for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of stations retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/stations/{stationId}": {
      "delete": {
        "tags": [
          "Stations"
        ],
        "summary": "Remove a station from a user's list of stations",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user from whose station list the station will be removed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "stationId",
            "in": "path",
            "description": "The ID of the station to be removed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The station was successfully removed from the user's list"
          },
          "404": {
            "description": "The station could not be found or is already removed"
          },
          "500": {
            "description": "Failed to delete the station from the user's list due to an internal error"
          }
        }
      }
    },
    "/users/{userId}/cars": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Add a car to a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to add a car to",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "make": {
                    "type": "string"
                  },
                  "model": {
                    "type": "string"
                  },
                  "year": {
                    "type": "integer"
                  },
                  "color": {
                    "type": "string"
                  },
                  "fuelType": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Car added successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get all cars of a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to fetch cars for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cars retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{userId}/cars/{carId}": {
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Remove a car from a user's list of cars",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user whose car list the car will be removed from",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "carId",
            "in": "path",
            "description": "The ID of the car to be removed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The car was successfully removed from the user's list"
          },
          "404": {
            "description": "The car could not be found or is already removed"
          },
          "500": {
            "description": "Failed to delete the car from the user's list due to an internal error"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Gas Api",
      "description": "Operations related to gas prices"
    },
    {
      "name": "Users",
      "description": "Operations related to user management"
    },
    {
      "name": "Stations",
      "description": "Operations related to user stations"
    },
    {
      "name": "Cars",
      "description": "Operations related to user cars"
    }
  ]
}