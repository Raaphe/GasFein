/**
 * GasFein API
 * This is the official API of GasFein
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsersLoginJwtPostRequest from '../model/UsersLoginJwtPostRequest';
import UsersLoginPostRequest from '../model/UsersLoginPostRequest';
import UsersUserIdPutRequest from '../model/UsersUserIdPutRequest';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersLoginJwtPost operation.
     * @callback module:api/UsersApi~usersLoginJwtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate user using JWT token
     * @param {module:model/UsersLoginJwtPostRequest} usersLoginJwtPostRequest 
     * @param {module:api/UsersApi~usersLoginJwtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersLoginJwtPost(usersLoginJwtPostRequest, callback) {
      let postBody = usersLoginJwtPostRequest;
      // verify the required parameter 'usersLoginJwtPostRequest' is set
      if (usersLoginJwtPostRequest === undefined || usersLoginJwtPostRequest === null) {
        throw new Error("Missing the required parameter 'usersLoginJwtPostRequest' when calling usersLoginJwtPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/login/jwt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersLoginPost operation.
     * @callback module:api/UsersApi~usersLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate user by email and password
     * @param {module:model/UsersLoginPostRequest} usersLoginPostRequest 
     * @param {module:api/UsersApi~usersLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersLoginPost(usersLoginPostRequest, callback) {
      let postBody = usersLoginPostRequest;
      // verify the required parameter 'usersLoginPostRequest' is set
      if (usersLoginPostRequest === undefined || usersLoginPostRequest === null) {
        throw new Error("Missing the required parameter 'usersLoginPostRequest' when calling usersLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * @param {module:model/UsersUserIdPutRequest} usersUserIdPutRequest 
     * @param {module:api/UsersApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPost(usersUserIdPutRequest, callback) {
      let postBody = usersUserIdPutRequest;
      // verify the required parameter 'usersUserIdPutRequest' is set
      if (usersUserIdPutRequest === undefined || usersUserIdPutRequest === null) {
        throw new Error("Missing the required parameter 'usersUserIdPutRequest' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDelete operation.
     * @callback module:api/UsersApi~usersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user by ID
     * @param {Number} userId The ID of the user to delete
     * @param {module:api/UsersApi~usersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDelete");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/UsersApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by ID
     * @param {Number} userId The ID of the user
     * @param {module:api/UsersApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPut operation.
     * @callback module:api/UsersApi~usersUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing user's details
     * @param {Number} userId The ID of the user to update
     * @param {module:model/UsersUserIdPutRequest} usersUserIdPutRequest 
     * @param {module:api/UsersApi~usersUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdPut(userId, usersUserIdPutRequest, callback) {
      let postBody = usersUserIdPutRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPut");
      }
      // verify the required parameter 'usersUserIdPutRequest' is set
      if (usersUserIdPutRequest === undefined || usersUserIdPutRequest === null) {
        throw new Error("Missing the required parameter 'usersUserIdPutRequest' when calling usersUserIdPut");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
