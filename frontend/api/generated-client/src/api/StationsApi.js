/**
 * GasFein API
 * This is the official API of GasFein
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsersUserIdStationsPostRequest from '../model/UsersUserIdStationsPostRequest';

/**
* Stations service.
* @module api/StationsApi
* @version 1.0.0
*/
export default class StationsApi {

    /**
    * Constructs a new StationsApi. 
    * @alias module:api/StationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersUserIdStationsGet operation.
     * @callback module:api/StationsApi~usersUserIdStationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all stations of a user
     * @param {Number} userId The ID of the user to fetch stations for
     * @param {module:api/StationsApi~usersUserIdStationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdStationsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdStationsGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/stations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdStationsPost operation.
     * @callback module:api/StationsApi~usersUserIdStationsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a station to a user
     * @param {Number} userId The ID of the user to add a station to
     * @param {module:model/UsersUserIdStationsPostRequest} usersUserIdStationsPostRequest 
     * @param {module:api/StationsApi~usersUserIdStationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdStationsPost(userId, usersUserIdStationsPostRequest, callback) {
      let postBody = usersUserIdStationsPostRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdStationsPost");
      }
      // verify the required parameter 'usersUserIdStationsPostRequest' is set
      if (usersUserIdStationsPostRequest === undefined || usersUserIdStationsPostRequest === null) {
        throw new Error("Missing the required parameter 'usersUserIdStationsPostRequest' when calling usersUserIdStationsPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/stations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdStationsStationIdDelete operation.
     * @callback module:api/StationsApi~usersUserIdStationsStationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a station from a user's list of stations
     * @param {Number} userId The ID of the user from whose station list the station will be removed
     * @param {String} stationId The ID of the station to be removed
     * @param {module:api/StationsApi~usersUserIdStationsStationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdStationsStationIdDelete(userId, stationId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdStationsStationIdDelete");
      }
      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling usersUserIdStationsStationIdDelete");
      }

      let pathParams = {
        'userId': userId,
        'stationId': stationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/stations/{stationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
