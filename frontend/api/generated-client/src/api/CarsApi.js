/**
 * GasFein API
 * This is the official API of GasFein
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsersUserIdCarsPostRequest from '../model/UsersUserIdCarsPostRequest';

/**
* Cars service.
* @module api/CarsApi
* @version 1.0.0
*/
export default class CarsApi {

    /**
    * Constructs a new CarsApi. 
    * @alias module:api/CarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersUserIdCarsCarIdDelete operation.
     * @callback module:api/CarsApi~usersUserIdCarsCarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a car from a user's list of cars
     * @param {Number} userId The ID of the user whose car list the car will be removed from
     * @param {String} carId The ID of the car to be removed
     * @param {module:api/CarsApi~usersUserIdCarsCarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCarsCarIdDelete(userId, carId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCarsCarIdDelete");
      }
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling usersUserIdCarsCarIdDelete");
      }

      let pathParams = {
        'userId': userId,
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/cars/{carId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdCarsGet operation.
     * @callback module:api/CarsApi~usersUserIdCarsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cars of a user
     * @param {Number} userId The ID of the user to fetch cars for
     * @param {module:api/CarsApi~usersUserIdCarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCarsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCarsGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdCarsPost operation.
     * @callback module:api/CarsApi~usersUserIdCarsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a car to a user
     * @param {Number} userId The ID of the user to add a car to
     * @param {module:model/UsersUserIdCarsPostRequest} usersUserIdCarsPostRequest 
     * @param {module:api/CarsApi~usersUserIdCarsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdCarsPost(userId, usersUserIdCarsPostRequest, callback) {
      let postBody = usersUserIdCarsPostRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCarsPost");
      }
      // verify the required parameter 'usersUserIdCarsPostRequest' is set
      if (usersUserIdCarsPostRequest === undefined || usersUserIdCarsPostRequest === null) {
        throw new Error("Missing the required parameter 'usersUserIdCarsPostRequest' when calling usersUserIdCarsPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/cars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
